@page "/"
@inject IJSRuntime JSRuntime;
@* @inject MdKaTeXService MdKaTeXService; *@

<div @ref="divElement">
</div>

@code {
    private ElementReference divElement;

    private MdKaTeXService mdService= new MdKaTeXService();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var markup = new MarkupString(@"
$$
J(\theta) 
= \sum_{s \in \mathcal{S}} d^\pi(s) V^\pi(s) 
= \sum_{s \in \mathcal{S}} d^\pi(s) \sum_{a \in \mathcal{A}} \pi_\theta(a \vert s) Q^\pi(s, a)
$$

where $d^\pi(s)$ is the stationary distribution of Markov chain for $\pi_\theta$ (on-policy state distribution under $\pi$). For simplicity, the parameter $\theta$ would be omitted for the policy $\pi_\theta$ when the policy is present in the subscript of other functions; for example, $d^{\pi}$ and $Q^\pi$ should be $d^{\pi_\theta}$ and $Q^{\pi_\theta}$ if written in full.

");
            await JSRuntime.InvokeVoidAsync("markdownHelper.render", markup.ToString(), divElement);
            StateHasChanged();

            var url = "https://raw.githubusercontent.com/Sohojoe/AccessibleRL/master/_tests/test001.md";
            string md = await mdService.FileToMarkdownAsync(url);
            await JSRuntime.InvokeVoidAsync("markdownHelper.render", md, divElement);
            StateHasChanged();


        }
    }    
}